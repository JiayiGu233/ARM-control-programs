;*----------------------------------------------------------------------------
;* Name:    Lab_2_program.s 
;* Purpose: This code template is for Lab 2
;* Author: Eric Praetzel and Rasoul Keshavarzi 
;*----------------------------------------------------------------------------*/
		THUMB 		; Declare THUMB instruction set 
                AREA 		My_code, CODE, READONLY 	; 
                EXPORT 		__MAIN 		; Label __MAIN is used externally q
		ENTRY 
__MAIN
; The following lines are similar to Lab-1 but use an address, in r4, to make it easier.
; Note that one still needs to use the offsets of 0x20 and 0x40 to access the ports
;
; Turn off all LEDs 
		MOV 		R2, #0xC000
		MOV 		R3, #0xB0000000	
		MOV 		R4, #0x0
		MOVT 		R4, #0x2009
		ADD 		R4, R4, R2 			; 0x2009C000 - the base address for dealing with the ports
		STR 		R3, [r4, #0x20]		; Turn off the three LEDs on port 1
		MOV 		R3, #0x0000007C
		STR 		R3, [R4, #0x40] 	; Turn off five LEDs on port 2 

ResetLUT
		LDR         R5, =InputLUT            ; assign R5 to the address at label LUT

; Start processing the characters

NextChar
        LDRB        R0, [R5]			; Read a character to convert to Morse Code
        ADD         R5, #1              ; point to next value for number of delays, jump by 1 byte
		TEQ         R0, #0              ; If we hit 0 (null at end of the string) then reset to the start of lookup table
		BNE			ProcessChar			; If we have a character process it

		MOV			R0, #4				; delay 4 extra spaces (7 total) between words (+ the three already there) 
		BL			DELAY
		BEQ         ResetLUT

ProcessChar	BL		CHAR2MORSE			; convert ASCII to Morse pattern in R1		
			B		NextChar    		; once a character is converted we branch to NextChar to begin processing the next character in the string
			
;*************************************************************************************************************************************************
;*****************  These are alternate methods to read the bits in the Morse code LUT. You can use them or not **********************************
;************************************************************************************************************************************************* 

;	This is a different way to read the bits in the Morse Code LUT than is in the lab manual.
; 	Choose whichever one you like.
; 
;	First - loop until we have a 1 bit to send  (no code provided)
;
;	This is confusing as we're shifting a 32-bit value left, but the data is ONLY in the lowest 16 bits, so test starting at bit 15 for 1 or 0
;	Then loop thru all of the data bits:
;
;		MOV		R6, #0x8000	; Init R6 with the value for the bit, 15th, which we wish to test
;		LSL		R1, R1, #1	; shift R1 left by 1, store in R1
;		ANDS		R7, R1, R6	; R7 gets R1 AND R6, Zero bit gets set telling us if the bit is 0 or 1
;		BEQ		; branch somewhere it's zero
;		BNE		; branch somewhere - it's not zero
;
;		....  lots of code
;		B 		somewhere in your code! 	; This is the end of the main program 
;
;	Alternate Method #2
; Shifting the data left - makes you walk thru it to the right.  You may find this confusing!
; Instead of shifting data - shift the masking pattern.  Consider this and you may find that
;   there is a much easier way to detect that all data has been dealt with.
;
;		LSR		R6, #1		; shift the mask 1 bit to the right
;		ANDS		R7, R1, R6	; R7 gets R1 AND R6, Zero bit gets set telling us if the bit is 0 or 1
;
;
;	Alternate Method #3
; All of the above methods do not use the shift operation properly.
; In the shift operation the bit which is being lost, or pushed off of the register,
; "falls" into the C flag - then one can BCC (Branch Carry Clear) or BCS (Branch Carry Set)
; This method works very well when coupled with an instruction which counts the number 
;  of leading zeros (CLZ) and a shift left operation to remove those leading zeros.

;*************************************************************************************************************************************************
;
;
; Subroutines
;
;			convert ASCII character to Morse pattern
;			pass ASCII character in R0, output in R1
;			index into MorseLuT must be by steps of 2 bytes

CHAR2MORSE	STMFD		R13!,{R0, R1, R14}	; push Link Register R14 (return address) on stack, also push R0 and R1 to preserve values outside the subroutine
		;
		;... add code here to convert the ASCII to an index (subtract 41) and lookup the Morse patter in the Lookup Table
		;
		SUB		R0, #0x41			; Subtract 0x41 from the ASCII value to get the index for the Morse LUT 
		LDR		R6, =MorseLUT		; Load the Morse LUT into R6 so we can access it 
		ADD     R0, R0, R0			; Multiply the Morse LUT index by 2 (add R0 to itself) to reach the value, since the LUT has data separated by 2 bytes per index 
		LDRH 	R0, [R6, R0] 		; Load the value of the Morse LUT at the index R0 into R0 -> the data in the table is 16-bits (half-word) 
		
		CLZ 	R1, R0 				; Count the number of leading 0s in R0 and store the result in R1 
		LSLS 	R0, R0, R1 			; Left-shift R0 by the number of leading zeroes (shift by R1) -> the first bit of R0 is now 1 

; Loop to shift the pattern left and change the LED based on the C status bit 
loop	LSLS 	R0, R0, #1   		; Shift left the morse pattern in R0, and set the C status bit 
		BLCS 	LED_ON				; If the C status bit is set/1, call the LED_ON subroutine 
		BLCC	LED_OFF 			; If the C status bit is clear/0, call the LED_OFF subroutine 

		CMP		R0, #0 				; After displaying the pattern for each bit, check if R0 = 0
		BNE		loop 				; If R0 not equal to 0, we branch back to the beginning of the loop and edit the LED based on the next bit after shifting left 
		
		BL 		LED_OFF				; If R0 = 0, we have reached the end of the character, so we call LED_OFF to turn off the LED (this adds the first of 3 delays to the end of the character)
		MOV 	R0, #2				; Move 2 into R0 so we can delay two more times (for a total of 3 times) 
		BL 		DELAY				; Call DELAY subroutine, passing R0 as the number of times to run the delay loop 
		
		LDMFD		R13!,{R0, R1, R15}	; Restore previous values of R0 and R1 from outside the subroutine, and restore LR to R15 the Program Counter to return


; Turn the LED on, but deal with the stack in a simpler way
; NOTE: This method of returning from subroutine (BX  LR) does NOT work if subroutines are nested!!
;
LED_ON 	   	push 		{r0, r3-r4, r14}		; Preserve R0, R3 and R4 on the R13 stack
		;... insert your code here
 		MOV		R3, #0xA0000000 	; Value to turn on the P1.28 LED is stored in R3 
		STR		R3, [R4, #0x20]		; Store the value to turn the LED on in the correct address for the respective LED
		MOV		R0, #1 				; Move 1 into R0 to have one delay 
		BL		DELAY				; Call the DELAY subroutine, with R0 equal to the number of times to delay 
		pop 	{r0, r3-r4, r15} 	; Restore register values 
		BX 		LR					; Branch to the address in the Link Register.  Ie return to the caller

; Turn the LED off, but deal with the stack in the proper way
; the Link register gets pushed onto the stack so that subroutines can be nested
;
LED_OFF	   	STMFD		R13!,{R0, R3, R14}	; Push R0, R3 and Link Register (return address) on stack
		
		;... insert your code here
		MOV		R3, #0xB0000000		; Value to turn off the P1.28 LED is stored in R3 
		STR		R3, [R4, #0x20]		; Store the value to turn the LED off in the correct address for the respective LED
		MOV		R0, #1 				;  Move 1 into R0 to have one delay 
		BL		DELAY 				; Call the DELAY subroutine, with R0 equal to the number of times to delay 
		LDMFD		R13!,{R0, R3, R15}	; Restore R0, R3 and LR to R15 the Program Counter to return
		BX 		LR 					; Branch to the address in the Link Register.  Ie return to the caller

;	Delay 500ms * R0 times
;	Use the delay loop from Lab-1 but loop R0 times around
;
DELAY			STMFD		R13!,{R0, R2, R14} ; Push R0, R2, and link register onto call stack 
MultipleDelay		TEQ		R0, #0			   ; Test R0 to see if it's 0 - set Zero flag so you can use BEQ, BNE
			;... insert your code here
					BEQ		exitDelay 			; if R0 = 0, we have delayed enough times and can branch to exitDelay to leave the subroutine
					SUB		R0, #1 				; If we still need to delay (R0 not equal to 0), subtract 1 from R0 (delay counter) since we are about to delay one time
					MOV		R2, #0x2c2a 		; Set the value of R2 to a counter value that will delay for 0.5 seconds (from lab 1)
					MOVT	R2, #0x000a 		; Set upper half of this value ^
loop2				SUBS	R2, #1				; Loop decrements R2 by one until R2 = 0, which is once we have delayed for 0.5 seconds 
					BNE		loop2 ; 
					B		MultipleDelay 		; Once done delaying, branch to MultipleDelay to check if we need to delay another 0.5 seconds
exitDelay		LDMFD		R13!,{R0, R2, R15} 	; Once all delays are done, exit the subroutine and pop register values to restore 

;
; Data used in the program
; DCB is Define Constant Byte size
; DCW is Define Constant Word (16-bit) size
; EQU is EQUate or assign a value.  This takes no memory but instead of typing the same address in many places one can just use an EQU
;
		ALIGN				; make sure things fall on word addresses

; One way to provide a data to convert to Morse code is to use a string in memory.
; Simply read bytes of the string until the NULL or "0" is hit.  This makes it very easy to loop until done.
;
InputLUT	DCB		"JGLTA", 0	; strings must be stored, and read, as BYTES

		ALIGN				; make sure things fall on word addresses
MorseLUT 
		DCW 	0x17, 0x1D5, 0x75D, 0x75 	; A, B, C, D
		DCW 	0x1, 0x15D, 0x1DD, 0x55 	; E, F, G, H
		DCW 	0x5, 0x1777, 0x1D7, 0x175 	; I, J, K, L
		DCW 	0x77, 0x1D, 0x777, 0x5DD 	; M, N, O, P
		DCW 	0x1DD7, 0x5D, 0x15, 0x7 	; Q, R, S, T
		DCW 	0x57, 0x157, 0x177, 0x757 	; U, V, W, X
		DCW 	0x1D77, 0x775 			; Y, Z

; One can also define an address using the EQUate directive
;
LED_PORT_ADR	EQU	0x2009c000	; Base address of the memory that controls I/O like LEDs

		END 

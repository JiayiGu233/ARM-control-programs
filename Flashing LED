;*----------------------------------------------------------------------------
;* Name:    Lab_1_program.s 
;* Purpose: This code flashes one LED at approximately 1 Hz frequency 
;* Author: 	Rasoul Keshavarzi 
;*----------------------------------------------------------------------------*/
	THUMB		; Declare THUMB instruction set 
	AREA		My_code, CODE, READONLY 	; 
	EXPORT		__MAIN 		; Label __MAIN is used externally q
	ENTRY 
__MAIN
; The following operations can be done in simpler methods. They are done in this 
; way to practice different memory addressing methods. 
; MOV moves into the lower word (16 bits) and clears the upper word
; MOVT moves into the upper word
; show several ways to create an address using a fixed offset and register as offset
;   and several examples are used below
; NOTE MOV can move ANY 16-bit, and only SOME >16-bit, constants into a register
; BNE and BEQ can be used to branch on the last operation being Not Equal or Equal to zero
;
	MOV 		R2, #0xC000		; move 0xC000 into R2
	MOV 		R4, #0x0		; init R4 register to 0 to build address
	MOVT 		R4, #0x2009		; assign 0x20090000 into R4
	ADD 		R4, R4, R2 		; add 0xC000 to R4 to get 0x2009C000 

	MOV 		R3, #0x0000007C	; move initial value for port P2 into R3 
	STR 		R3, [R4, #0x40] 	; Turn off five LEDs on port 2 

	MOV 		R3, #0xB0000000	; move initial value for port P1 into R3
	STR 		R3, [R4, #0x20]	; Turn off three LEDs on Port 1 using an offset

	MOV 		R2, #0x20		; put Port 1 offset into R2 for use later
	
loop 	MOV 		R0, #0X2C2A      ; Initialize lower word/four bits of R0 for countdown
	MOVT 		R0, #0x000A 		; Initialize R0 upper word/four bits for countdown

delay	SUBS 		R0, #1 			; Decrement R0 by 1 and set the N,Z,C status bits
		
	BNE 		delay ; check if the operation in the previous line (value in R0-1) equals 0, and if not equal to zero then we branch back to the label 'delay' (which decrements R0 again)
				; once R0-1 = 0 we do not branch and continue to the next line; this is when the delay is fulfilled and we can now toggle the LED on/off

	EOR 		R3, R3, #0x10000000 ; XOR the current value in R0 with 0x10000000. This results in all other bits of R0 staying the same (XOR with 0 results in the initial value)
						; and the 28th bit of R0 being toggled (XOR 1 with 0 results in 1, and XOR 1 and 1 results in 0, so the bit is toggled)
	STR 		R3, [R4, R2] 		; write R3 to port 1, YOU NEED to toggle bit 28 first - this turns the LED on/off 


	B 		loop		; Branch back to the 'loop' label and reset the counter to the initial value so we can decrement again and toggle the LED on/off 

 	END 
	
	// Hand Assembly for ADD R4, R4, R2: 1110 00 0 0100 0 0100 0100 00000000 0010
	// Converting to hex: 0xE0844002
		
		

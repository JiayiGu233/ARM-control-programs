;*-------------------------------------------------------------------
;* Name:    	lab_4_program.s 
;* Purpose: 	A sample style for lab-4
;* Term:		Winter 2013
;*-------------------------------------------------------------------
				THUMB 								; Declare THUMB instruction set 
				AREA 	My_code, CODE, READONLY 	; 
				EXPORT 		__MAIN 					; Label __MAIN is used externally 
                                EXPORT          EINT3_IRQHandler
				ENTRY 

__MAIN

				LDR			R10, =ISER0			; R10 is a pointer to the base address for the interrupt enable (EINT3 channel)
				LDR			R3, [R10]	
				ORR 		R3, #0x00200000		; Enable interrupt by writing 1 to bit 21 (the same as ORing current value with a 1 in bit 21) 
				STR 		R3, [R10]

				LDR			R10, =IO2IntEnf		; R10 is a pointer to the base address for enabling falling edge for the interrupt
				LDR			R3, [R10]
				ORR 		R3, #0x00000400		; Enable falling edge for pin 2.10 by writing 1 to bit 10 (the same as ORing current value with a 1 in bit 10)
				STR 		R3, [R10]

; The following lines are similar to previous labs.
; They just turn off all LEDs 
				LDR			R5, =LED_BASE_ADR	; R10 is a  pointer to the base address for the LEDs
				MOV 		R3, #0xB0000000		; Turn off three LEDs on port 1  
				STR 		R3, [R5, #0x20]
				MOV 		R3, #0x0000007C
				STR 		R3, [R5, #0x40] 	; Turn off five LEDs on port 2 

; This line is very important in your main program
; Initializes R11 to a 16-bit non-zero value and NOTHING else can write to R11 !!
				MOV			R11, #0x1111		; Init the random number generator with a non-zero number
LOOP 			BL 			RNG
				
				; flash LEDS on and off, with a 0.1s * 2 delay in between (5Hz freq)
				; this is done continuously as long as we are in the main program 
				MOV 		R3, #0x40000000		; Turn on three LEDs on port 1  
				STR 		R3, [r5, #0x20]
				MOV 		R3, #0x00000083
				STR 		R3, [R5, #0x40] 	; Turn on five LEDs on port 2 	
				MOV			R0, #2
				BL			DELAY
				MOV 		R3, #0xB0000000		; Turn off three LEDs on port 1  
				STR 		R3, [r5, #0x20]
				MOV 		R3, #0x0000007C
				STR 		R3, [R5, #0x40] 	; Turn off five LEDs on port 2 
				MOV			R0, #2
				BL			DELAY
				B 			LOOP
					
				
;*------------------------------------------------------------------- 
; Subroutine RNG ... Generates a pseudo-Random Number in R11 
;*------------------------------------------------------------------- 
; R11 holds a random number as per the Linear feedback shift register (Fibonacci) on WikiPedia
; R11 MUST be initialized to a non-zero 16-bit value at the start of the program
; R11 can be read anywhere in the code but must only be written to by this subroutine
RNG 			STMFD		R13!,{R1-R3, R14} 	; Random Number Generator 
				AND			R1, R11, #0x8000
				AND			R2, R11, #0x2000
				LSL			R2, #2
				EOR			R3, R1, R2
				AND			R1, R11, #0x1000
				LSL			R1, #3
				EOR			R3, R3, R1
				AND			R1, R11, #0x0400
				LSL			R1, #5
				EOR			R3, R3, R1			; The new bit to go into the LSB is present
				LSR			R3, #15
				LSL			R11, #1
				ORR			R11, R11, R3
				
				LDMFD		R13!,{R1-R3, R15}

;*------------------------------------------------------------------- 
; Subroutine DELAY ... Causes a delay of 100ms * R0 times
;*------------------------------------------------------------------- 
; 		aim for better than 10% accuracy
DELAY			STMFD		R13!,{R1, R2, R14}
		;
		; code to generate a delay of 100mS * R0 times
		;
		
			MOV			R1, R0 		; Store R0 in R1 to use as the delay counter (number of times to delay for 0.1 seconds)
			
MULTI_DELAY	TEQ 		R1, #0 		; If the counter = 0, we are done delaying 
			BEQ 		exitDelay		
			SUB			R1, #1			;If not done delaying, decrement the counter so we can loop again and delay for 0.1 s
			
			MOV 		R0, #0X08D5      ; Initialize lower word/four bits of R0 for countdown 
			MOVT		R0, #0x0002		 ; Initilize upper word/four bits of R0 for countdown 
			
DELAY_COUNT	SUBS 		R0, #1 			; Decrement R0 by 1 and set the N,Z,C status bits
		
			BNE 		DELAY_COUNT ; check if the operation in the previous line (value in R0-1) equals 0, and if not equal to zero then we branch back to the label DELAY_COUNT (which decrements R0 again)
									; once R0-1 = 0 we do not branch and continue to the next line; this is when the delay is fulfilled 

			B 		MULTI_DELAY 	; Once we have delayed 0.1 s we branch back to the beginning of the loop to check if we need to keep delaying 
		
		
exitDelay			LDMFD		R13!,{R1, R2, R15}

; The Interrupt Service Routine MUST be in the startup file for simulation 
;   to work correctly.  Add it where there is the label "EINT3_IRQHandler
;
;*------------------------------------------------------------------- 
; Interrupt Service Routine (ISR) for EINT3_IRQHandler 
;*------------------------------------------------------------------- 
; This ISR handles the interrupt triggered when the INT0 push-button is pressed 
; with the assumption that the interrupt activation is done in the main program
EINT3_IRQHandler 	
				STMFD 		R13!, {R1, R14} 				; Use this command if you need it  
		;
		; Code that handles the interrupt 
		
				; store 9 and 25 into registers to use for the scaling calculation
				; store random R11 value into R6 for scaling 
				MOV			R6, R11
				MOV 		R1, #9  		
				MOV			R2, #25
			
				UDIV		R4, R6, R1	; divide the random R11 value by 9, discarding the remainder 
				MUL 		R4, R4, R1	; multiply the quotient by 9
				SUB			R4, R6, R4	; subtract the result from R11 to get the remainder (R11 mod 9) between 0 and 8
				ADD			R4, #2	; add 2 to get a number between 2-10
				MUL			R6, R4, R2 ; multiply by 25 to get a number between 50 and 250  -> number of loops to delay 0.1 s for, for total delay of 5-25s
				
					
NUMBER			SUB			R6, #10			; Decrement the random number/ time left by 10 
				CMP			R6, #1			; CMP the new value with 1 and in the next line check if the negative flag is set, which indicates the number is less than 1 (0 or negative)
				BMI			DisplayZero		; If R6 is now 0 or negative, we are done counting down and display 0 on the LEDS before leaving the ISR
				
				MOV			R1, R6			; Store counter in R1 
				EOR			R1, #0xFF		; Flip all the bits in the number because the LEDS are active low (0 = turn on) 
				RBIT		R1, R1			; Reverse the order of bits in the number so we can correctly display them on the board ( the leftmost LED for each port is the least significant of the bits for the port leds, but we want to display the most significant bit of the number, so we reverse the bits). 
				LSR			R1, #24			; Shift the reversed value right 24 bits so the 8 bits we want are in the least significant 2 bytes again 
				BFI			R3, R1, #28, #2	; Take the first two bits of R1 and store them in bit 28 and 29 of R3 (for LEDS 1.28 and 1.29)
				LSR			R1, #2			; Shift right twice to discard the two already inserted bits ^
				BFI			R3, R1, #31, #1 ; Take the new first bit of R1 (the 3rd digit) and store it into bit 31 of R3 (for  LED 1.31)
				STR 		R3, [r5, #0x20]; Write R3 to port 1 to turn on/off the 3 port 1 LEDs to display the 3 most significant bits of the number
				LSR			R1, #1			; Shift right once to discard the bit we just inserted to R3
				BFI		    R3,	R1, #2, #5	; Take the new first five bits of R1 and store them in bits 2 to 6 of R3 (for LEDS 2.2 to 2.6)
				STR 		R3, [R5, #0x40]		; Write R3 to port 2 to turn on/off the five port 2 LEDS to display the 5 leftover bits of the number
	     		
				MOV			R0, #10			; After displaying the current R6 value we delay for 1 second (0.1s * 10)
				BL			DELAY
				B			NUMBER			; Once delay is done we run the loop again (decrement R6 and display the new number or 0)

DisplayZero		MOV 		R3, #0xB0000000		; Turn off three LEDs on port 1  
				STR 		R3, [r5, #0x20]
				MOV 		R3, #0x0000007C
				STR 		R3, [R5, #0x40] 	; Turn off five LEDs on port 2 
				MOV			R0, #10
				BL			DELAY				; Display 0 for 1 second (10*0.1s)
				LDR			R10, =IO2IntClr		; R10 is a pointer to the base address for clearing the intterup 
				LDR			R3, [R10]	
				ORR			R3, #0X00000400		; Write a 1 to bit 10 (OR with a 1 at bit 10) of the address to clear the interrupt for pin 2.10 (push button)
				STR 		R3, [R10]
					
				LDMFD 		R13!, {R1, R15}				; Use this command if you used STMFD (otherwise use BX LR) 


;*-------------------------------------------------------------------
; Below is a list of useful registers with their respective memory addresses.
;*------------------------------------------------------------------- 
LED_BASE_ADR	EQU 	0x2009c000 		; Base address of the memory that controls the LEDs 
PINSEL3			EQU 	0x4002C00C 		; Pin Select Register 3 for P1[31:16]
PINSEL4			EQU 	0x4002C010 		; Pin Select Register 4 for P2[15:0]
FIO1DIR			EQU		0x2009C020 		; Fast Input Output Direction Register for Port 1 
FIO2DIR			EQU		0x2009C040 		; Fast Input Output Direction Register for Port 2 
FIO1SET			EQU		0x2009C038 		; Fast Input Output Set Register for Port 1 
FIO2SET			EQU		0x2009C058 		; Fast Input Output Set Register for Port 2 
FIO1CLR			EQU		0x2009C03C 		; Fast Input Output Clear Register for Port 1 
FIO2CLR			EQU		0x2009C05C 		; Fast Input Output Clear Register for Port 2 
IO2IntEnf		EQU		0x400280B4		; GPIO Interrupt Enable for port 2 Falling Edge 
ISER0			EQU		0xE000E100		; Interrupt Set-Enable Register 0 
IO2IntClr		EQU		0x400280AC		; GPIO Interrupt Clear register for port 2 (Clear interrupt)
				ALIGN 

				END 
